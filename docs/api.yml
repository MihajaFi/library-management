openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/queryPagination'
        
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                  type: array
                  items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/crupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      tags: 
        - Books
      summary: associate some books with some Authors
      operationId: addAuthorToBook
      parameters:
       - in: path
         name: bookId
         schema:
          type: string
         required: true
       - in: path
         name: authorId
         schema:
          type: string
         required: true
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      summary: associate multiple books to an author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"  

      responses:
        200:
          description: A book has been associate to an author
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Book"
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/pathPagination'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /books/import:
    post:
      tags:
        - Books
      summary: Import a list of books
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/crupdateBook'
      responses:
        200:
          description: The list of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import a list of authors
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

components:
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    UpdateBookAuthor:
      type: object
      properties:
        bookId: 
           type: string
        authorId:
           type: string
      required:
        - bookId
        - authorId
    status:
      type: object
      properties:
        statusCode:
          type: integer
          description: statut code responses
        message:
          type: string
          description: message with the status code
    body:
      type: object
      properties:
        Property: 
          type: string
    responses:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/status'
    response200:
      allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    response400:
       allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    response403:
       allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    response500:
        allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    
  parameters:        
      queryPagination:
        in: query
        name: queryPagination
        description: pagination to the query parameters
        required: false
        schema:
          type: object
          properties:           
             Page:
              description: Page Number for pagination (default 1)
              type: integer
              default: 1        
             PageSize:
              description: Page size for pagination default 50      
              default: 50
              type: integer
      pathPagination:
        in: path
        name: pathPagination
        description: Pagination to the path parameters
        required: true
        schema:
         type: object
         properties:
           Page:
            type: integer
            default: 1
            description: Page Number for pagination default 1
           PageSize:
            type: integer
            default: 50
            description: Page size for pagination default 50
          


